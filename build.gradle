plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
	id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

def secrets = new Properties()
def secretsFile = file('secrets.properties')
if (secretsFile.exists()) {
    secretsFile.withInputStream {
        stream -> secrets.load(stream)
    }

    fileTree("secrets").matching {
        include "**/*.properties"
    }.each {
        File file ->
            file.withInputStream {
                stream -> secrets.load(stream)
            }
    }
}

version = project.mod_version
group = group_name

base {
    archivesName = "${project.mod_id}-${project.minecraft_version}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
	mappings channel: 'parchment', version: '2023.09.03-1.20.1'
    copyIdeResources = true
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'
            property 'mixin.env.disableRefMap', 'true'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            taskName "Minecraft_Client_${project.minecraft_version}"
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--username', secrets.getProperty("username")?: 'Dev', secrets.getProperty("uuid") ? '--uuid' : '', secrets.getProperty("uuid")?: ''
        }

        server {
            taskName "Minecraft_Server_${project.minecraft_version}"
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            taskName "Minecraft_GameTestServer_${project.minecraft_version}"
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            taskName "Minecraft_Data_${project.minecraft_version}"
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name 'Jared\'s Maven' // JEI and Patchouli
        url 'https://maven.blamejared.com/'
    }

    maven {
        name 'Curseforge Maven' // Jade
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft "net.neoforged:forge:${project.minecraft_version}-${project.neo_version}"

    implementation fg.deobf("mezz.jei:jei-${project.minecraft_version}-forge:${project.jei_version}")

    implementation fg.deobf("curse.maven:jade-324717:4711195")

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${project.minecraft_version}-${project.patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${project.minecraft_version}-${project.patchouli_version}")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "Risus",
                "Specification-Vendor"    : "Bigdious",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Bigdious",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
