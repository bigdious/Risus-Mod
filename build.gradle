plugins {
	id 'java-library'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'net.neoforged.gradle.userdev' version '7.0.145'
}

tasks.named('wrapper', Wrapper).configure {
	// Define wrapper values here so as to not have to always do so when updating gradlew.properties.
	// Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
	// documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
	// file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
	// (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
	distributionType = Wrapper.DistributionType.BIN
}


version = mod_version
group = mod_group_id

repositories {
	mavenLocal()
	maven {
		name 'Jared\'s Maven' // JEI and Patchouli
		url 'https://maven.blamejared.com/'
	}

	maven {
		name 'Curseforge Maven' // Jade
		url "https://www.cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
}

base {
	archivesName = mod_id
}

def secrets = new Properties()
def secretsFile = file('secrets.properties')
if (secretsFile.exists()) {
	secretsFile.withInputStream {
		stream -> secrets.load(stream)
	}

	fileTree("secrets").matching {
		include "**/*.properties"
	}.each {
		File file ->
			file.withInputStream {
				stream -> secrets.load(stream)
			}
	}
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
	// applies to all the run configs below
	configureEach {
		// Recommended logging data for a userdev environment
		// The markers can be added/remove as needed separated by commas.
		// "SCAN": For mods scan.
		// "REGISTRIES": For firing of registry events.
		// "REGISTRYDUMP": For getting the contents of all registries.
		systemProperty 'forge.logging.markers', 'REGISTRIES'

		// Recommended logging level for the console
		// You can set various levels here.
		// Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
		systemProperty 'forge.logging.console.level', 'debug'

		modSource project.sourceSets.main
	}

	client {
		// Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
		systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
	}

	server {
		systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
		programArgument '--nogui'
	}

	// This run config launches GameTestServer and runs all registered gametests, then exits.
	// By default, the server will crash when no gametests are provided.
	// The gametest system is also enabled by default for other run configs under the /test command.
	gameTestServer {
		systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
	}

	data {
		// example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
		// workingDirectory project.file('run-data')

		// Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
		programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
	}
}


sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
	runtimeClasspath.extendsFrom localRuntime
}




dependencies {
//	implementation "mezz.jei:jei-${project.minecraft_version}-neoforge:${project.jei_version}"
	compileOnly "curse.maven:jade-324717:5444008"

	compileOnly "vazkii.patchouli:Patchouli:${project.minecraft_version}-${project.patchouli_version}:api"
	runtimeOnly "vazkii.patchouli:Patchouli:${project.minecraft_version}-${project.patchouli_version}"


	implementation "net.neoforged:neoforge:${neo_version}"
}


tasks.withType(ProcessResources).configureEach {
	var replaceProperties = [
		minecraft_version      : minecraft_version,
		minecraft_version_range: minecraft_version_range,
		neo_version            : neo_version,
		neo_version_range      : neo_version_range,
		loader_version_range   : loader_version_range,
		mod_id                 : mod_id,
		mod_name               : mod_name,
		mod_license            : mod_license,
		mod_version            : mod_version,
		mod_authors            : mod_authors,
		mod_description        : mod_description
	]
	inputs.properties replaceProperties

	filesMatching(['META-INF/neoforge.mods.toml']) {
		expand replaceProperties
	}
}

publishing {
	publications {
		register('mavenJava', MavenPublication) {
			from components.java
		}
	}
	repositories {
		maven {
			url "file://${project.projectDir}/repo"
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
	module {
		downloadSources = true
		downloadJavadoc = true
	}
}
