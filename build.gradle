plugins {
	id 'java-library'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'net.neoforged.gradle.userdev' version '7.0.105'
}

def secrets = new Properties()
def secretsFile = file('secrets.properties')
if (secretsFile.exists()) {
	secretsFile.withInputStream {
		stream -> secrets.load(stream)
	}

	fileTree("secrets").matching {
		include "**/*.properties"
	}.each {
		File file ->
			file.withInputStream {
				stream -> secrets.load(stream)
			}
	}
}

version = project.mod_version
group = group_name

base {
    archivesName = "${project.mod_id}-${project.minecraft_version}"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
compileJava.options.compilerArgs << "-Xlint:all,-classfile,-processing,-deprecation" << "-Werror"

runs {
	configureEach {
		workingDirectory project.file('run')
		systemProperty 'forge.logging.console.level', 'debug'
		systemProperty 'fml.earlyprogresswindow', 'false'
		systemProperty 'mixin.env.disableRefMap', 'true'

		modSource project.sourceSets.main
	}

	client {
		systemProperty 'forge.enabledGameTestNamespaces', mod_id
		programArguments.addAll '--username', secrets.getProperty("username")?: 'Dev', secrets.getProperty("uuid") ? '--uuid' : '', secrets.getProperty("uuid")?: ''
	}

	server {
		systemProperty 'forge.enabledGameTestNamespaces', mod_id
		programArgument '--nogui'
	}

	gameTestServer {
		systemProperty 'forge.enabledGameTestNamespaces', mod_id
	}

	data {
		workingDirectory project.file('run-data')
		programArguments.addAll '--mod', mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
	}
}

subsystems {
	parchment {
		minecraftVersion = "1.20.3" //parchment doesnt support 1.20.4 yet????
		mappingsVersion = project.parchment_version
	}
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	maven {
		name 'Jared\'s Maven' // JEI and Patchouli
		url 'https://maven.blamejared.com/'
	}

	maven {
		name 'Curseforge Maven' // Jade
		url "https://www.cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
}

dependencies {
	//make sure to only pick one of these when testing (switch others to compileOnly)
	implementation "mezz.jei:jei-${project.minecraft_version}-neoforge:${project.jei_version}"

	//curse maven
	compileOnly "curse.maven:jade-324717:4980188"
	compileOnly "vazkii.patchouli:Patchouli:${project.minecraft_version}-${project.patchouli_version}:api"
	runtimeOnly "vazkii.patchouli:Patchouli:${project.minecraft_version}-${project.patchouli_version}"

	implementation "net.neoforged:neoforge:${project.neo_version}"
}


tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title"     : "Risus",
                "Specification-Vendor"    : "Bigdious",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Bigdious",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.register('sourceJar', Jar) {
	dependsOn 'classes'
	from sourceSets.main.allSource
	archiveClassifier = 'sources'
}


tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}

idea {
	// Tell IDEA to always download sources/javadoc artifacts from maven.
	module {
		downloadJavadoc = true
		downloadSources = true
	}
}
